{"version":3,"sources":["components/Card/Card.js","components/CardList/CardList.js","components/SearchBar/SearchBar.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBar","placeholder","onHandleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","res","json","users","this","filterMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAIaA,G,MAAO,SAACC,GACjB,OACI,sBAAKC,UAAY,iBAAjB,UACI,qBAAKC,IAAM,UAAUC,IAAG,+BAA4BH,EAAMI,QAAQC,GAA1C,gCACzB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,aCLhBC,G,MAAW,SAACR,GACrB,OACI,qBAAKC,UAAY,YAAjB,SAEID,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACtB,cAAC,EAAD,CAAyBA,QAAWA,GAAvBA,EAAQC,WCMtBM,G,MAZG,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,YAAYC,EAAqB,EAArBA,eAC5B,OACI,8BACK,uBAAOZ,UAAY,SAChBa,KAAO,SACPF,YAAeA,EACfG,SAAWF,QCiCZG,G,MArCf,kDACE,aAAc,IAAD,8BACX,gBAOFH,eAAiB,SAAAI,GAAK,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SALzD,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAY,IALH,EADf,gEAasB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAASkB,SAhB3C,+BAoBY,IAAD,EACyBC,KAAKN,MAA9Bb,EADA,EACAA,SAAUU,EADV,EACUA,YACXU,EAAiBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC5CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAClD,OACE,sBAAK9B,UAAY,MAAjB,UACC,kDACC,cAAC,EAAD,CACEW,YAAc,iBACdC,eAAkBe,KAAKf,iBAEzB,cAAC,EAAD,CAAUJ,SAAYoB,WA/B9B,GAAyBI,cCOVC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0bb44bfa.chunk.js","sourcesContent":["import React from 'react';\nimport './card.css'\n\n\nexport const Card = (props) => {\n    return (\n        <div className = \"card-container\">\n            <img alt = \"monster\" src = {`https://robohash.org/${props.monster.id}?set=set2&size = 180 * 180`} />\n           <h1>{props.monster.name}</h1> \n           <p>{props.monster.email}</p>\n        </div>\n    )\n}\n","import React from 'react';\nimport {Card} from '../Card/Card'\nimport './cardlist.css'\n\nexport const CardList = (props) => {\n    return (\n        <div className = \"card-list\">   \n            {\n            props.monsters.map(monster =>(\n                <Card key = {monster.id} monster = {monster}/>\n            ))\n            }\n        </div>\n    )\n}\n\n","import React from 'react';\nimport './searchbar.css'\n\nconst SearchBar = ({placeholder,onHandleChange }) => {\n    return (\n        <div>\n             <input className = \"search\"\n                type = \"search\"\n                placeholder = {placeholder}\n                onChange= {onHandleChange}\n             />\n        </div>\n    )\n}\n\nexport default SearchBar\n","import React, { Component } from 'react';\nimport {CardList} from './components/CardList/CardList'\nimport SearchBar from './components/SearchBar/SearchBar'\nimport './App.css'\n\nexport class App extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n      monsters :[],\n      searchField:''\n    }\n  }\n  onHandleChange = e =>{this.setState({searchField: e.target.value}\n      )}\n  \n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res => res.json())\n    .then(users => this.setState({monsters:users}))\n\n  }\n\n  render() {\n    const {monsters, searchField} = this.state;\n    const filterMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n      <div className = \"App\">\n       <h1>MONSTERS ROLODEX</h1>\n        <SearchBar \n          placeholder = \"search monster\"\n          onHandleChange = {this.onHandleChange }\n        />\n        <CardList monsters = {filterMonsters}/>\n      </div>\n    )\n  }\n}\n\nexport default App\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}